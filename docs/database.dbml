Project SiakadIAMService {
  database_type: "PostgreSQL"
  note: '''
  Simplified IAM with single-column primary keys named "id" and soft delete (deleted_at) on all tables.
  Features: Users, Orgs, RBAC (roles/permissions/groups), Sessions, JWT keys, Token denylist.
  '''
}

/////////////////////////////////////////////////
// SCHEMA: iam  (all tables have: id + deleted_at)
/////////////////////////////////////////////////

Table iam.organizations {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  code          text [not null, unique]
  name          text [not null]
  status        text [not null, default: 'ACTIVE'] // ACTIVE | INACTIVE

  Indexes {
    code [unique]
    name 
    deleted_at
  }
}

Table iam.users {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  email         varchar(100) [not null] 
  full_name     varchar(100) [not null]
  type          varchar [not null] // e.g., TEACHER, STUDENT, STAFF, GUARDIAN, etc

  Indexes {
    email [unique]
    deleted_at
  }
}

Table iam.user_organizations {
  // Base Columns
  id                      uuid [pk, default: `gen_random_uuid()`]
  created_at              timestamptz [not null, default: `now()`]
  updated_at              timestamptz [not null, default: `now()`]
  deleted_at              timestamptz

  user_id                 uuid [not null, ref: > iam.users.id]
  organization_id         uuid [not null, ref: > iam.organizations.id]
  is_default              boolean [not null, default: false]

  Indexes { 
    (user_id, organization_id) [unique] // composite index prevent duplicate membership
    deleted_at
  } 
}

Table iam.user_emails {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  user_id       uuid [not null, ref: > iam.users.id]
  email         text [not null]
  is_primary    boolean [not null, default: false]
  is_verified   boolean [not null, default: false]
  verified_at   timestamptz

  Indexes { 
    user_id
    email [unique]
    deleted_at
  }
  Note: 'Add partial unique index in SQL: UNIQUE (lower(email)) WHERE is_primary = true'
}

Table iam.user_phones {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  user_id       uuid [not null, ref: > iam.users.id]
  phone_e164    text [not null]
  is_primary    boolean [not null, default: false]
  is_verified   boolean [not null, default: false]
  verified_at   timestamptz

  Indexes { 
    user_id
    phone_e164 [unique]
    deleted_at
  }
}

/////////////////////////////////////////////////
// CREDENTIALS (Password only) & HISTORY
/////////////////////////////////////////////////

Table iam.user_credential_passwords {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  user_id       uuid [not null, ref: > iam.users.id]
  password      text [not null]

  Indexes { 
    user_id [unique] // one active password record per user
    deleted_at
  } 
}

Table iam.user_credential_password_history {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  user_id       uuid [not null, ref: > iam.users.id]
  password      text [not null]

  Indexes { 
    (user_id, created_at) // composite index
    deleted_at
  }
}

/////////////////////////////////////////////////
// RBAC (Roles / Permissions / Groups)
/////////////////////////////////////////////////

Table iam.roles {
  // Base Columns
  id                      uuid [pk, default: `gen_random_uuid()`]
  created_at              timestamptz [not null, default: `now()`]
  updated_at              timestamptz [not null, default: `now()`]
  deleted_at              timestamptz

  organization_id         uuid [ref: > iam.organizations.id]
  code                    text [not null]
  name                    text [not null]
  description             text

  Indexes { 
    (organization_id, code) [unique] // composite index unique
    deleted_at
  }
}

Table iam.actions {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  code          varchar(50) [not null] // e.g., 'create' | 'read' | 'update' | 'delete' | 'approve' | 'import' | 'export'
  name          varchar(100) [not null]
  is_active     boolean [not null, default: false]

  Indexes {
    deleted_at
  }
}

Table iam.resources {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  code          varchar(100) [not null] // e.g., 'ppdb' | 'grade' | 'attendance' | 'etc'
  name          varchar(255) [not null]
  is_active     boolean [not null, default: false]

  Indexes {
    deleted_at
  }
}

Table iam.permissions {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  resource_id   uuid [not null, ref: > iam.resources.id]
  action_id     uuid [not null, ref: > iam.actions.id]
  description   text

  Indexes { 
    (resource_id, action_id) [unique] // composite index unique
    deleted_at
  }
}

Table iam.role_permissions {
  role_id             uuid [not null, ref: > iam.roles.id]
  permission_id       uuid [not null, ref: > iam.permissions.id]

  Indexes { 
    (role_id, permission_id) [unique] // composite index
  }
}

Table iam.user_roles {
  // Base Columns
  id                      uuid [pk, default: `gen_random_uuid()`]
  created_at              timestamptz [not null, default: `now()`]
  updated_at              timestamptz [not null, default: `now()`]
  deleted_at              timestamptz
  
  user_id                 uuid [not null, ref: > iam.users.id]
  role_id                 uuid [not null, ref: > iam.roles.id]
  organization_id         uuid [ref: > iam.organizations.id]

  Indexes { 
    (user_id, role_id) [unique] // composite index
  }
}

Table iam.groups {
  // Base Columns
  id                      uuid [pk, default: `gen_random_uuid()`]
  created_at              timestamptz [not null, default: `now()`]
  updated_at              timestamptz [not null, default: `now()`]
  deleted_at              timestamptz

  organization_id         uuid [ref: > iam.organizations.id]
  code                    text [not null]
  name                    text [not null]

  Indexes { 
    (organization_id, code) [unique] // composite index
    deleted_at
  }
}

Table iam.group_members {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  group_id      uuid [not null, ref: > iam.groups.id]
  user_id       uuid [not null, ref: > iam.users.id]

  Indexes { 
    (group_id, user_id) [unique]
    deleted_at
  }
}

Table iam.group_roles {
  group_id      uuid [not null, ref: > iam.groups.id]
  role_id       uuid [not null, ref: > iam.roles.id]

  Indexes { 
    (group_id, role_id) [unique]
  }
}

/////////////////////////////////////////////////
// SESSIONS, JWT KEYS, TOKEN DENYLIST
/////////////////////////////////////////////////

Table iam.sessions {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  user_id       uuid [not null, ref: > iam.users.id]
  ip            inet
  user_agent    text
  revoked_at    timestamptz
  last_seen_at  timestamptz

  Indexes { 
    user_id 
    deleted_at
  }
}

Table iam.jwt_keys {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  kid           text [not null, unique]   // key id in JWT header
  alg           text [not null]           // RS256, ES256, HS256
  public_jwk    jsonb                     // for asymmetric; NULL if HS256
  is_active     boolean [not null, default: true]
  note          text
  rotated_at    timestamptz
  expires_at    timestamptz

  Indexes {
    (kid, is_active) // Composite index
    is_active
    deleted_at
  }
}

Table iam.refresh_tokens {
  // Base Columns
  id                uuids  [pk, default: `gen_random_uuid()`]
  created_at        timestamptz [not null, default: `now()`]
  updated_at        timestamptz [not null, default: `now()`]
  deleted_at        timestamptz

  user_id           uid   [not null, ref: > iam.users.id]
  session_id        uuid  [not null, ref: > iam.sessions.id]
  token             text  [not null]
  ip                inet
  user_agent        text
  issued_at         timestamptz [not null, default: `now()`]
  expires_at        timestamptz [not null, default: `now()`]
  revoked_at        timestamptz 

  Indexes {
    (user_id, session_id) [unique] // composite unique index
  }
}

Table iam.token_denylist {
  // Base Columns
  id            uuid [pk, default: `gen_random_uuid()`]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  jti           uuid [not null]           // JWT ID to revoke
  reason        text
  expires_at    timestamptz [not null]

  Indexes { 
    jti [unique]
    expires_at
  }
}